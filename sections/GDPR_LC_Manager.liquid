{% comment %} V 2.0.0 {% endcomment %}
{% unless request.design_mode and section.settings.testMode == false %}
    {% assign metafields = shop.metafields.bc_cookie %}

    {% assign data = null -%}
    {%- if shop.metafields.bc_cookie.value == blank -%}
      {%- assign data = shop.metafields.bc_cookie -%}
    {%- else -%}
      {%- assign data = shop.metafields.bc_cookie.value -%}
    {%- endif %}

    {% assign bc_cookie_list = null -%}
    {%- if data.bc_cookie_list.value == blank -%}
      {%- assign bc_cookie_list = data.bc_cookie_list -%}
    {%- else -%}
      {%- assign bc_cookie_list = data.bc_cookie_list.value -%}
    {%- endif %}

    {% if data.size > 0 and bc_cookie_list._bc_c_set.live == '1' and content_for_header contains 'beeclever.app\/get-script.php' %}
      
  {%- if section.settings.useOverlay -%}
    <script type="text/template" id="bc_consent_container_template">
      <div class="bc_consent_container__wrapper FeatureText"><div class="bc_consent_container__message"><p>{{ 'gdpr-legal-cookie-consentmanager.info' | t }}</p></div><div class="button__wrapper"><button>{{ 'gdpr-legal-cookie-consentmanager.button_accept' | t }}</button></div></div>
    </script>
  {%- endif -%}

  <script>
    window.thirdPartyScriptDefinition = window.thirdPartyScriptDefinition || [];
    let sDomain = location.host;
    {%- render 'zload-metafields' -%}
    
    window.BC_GDPR_CustomScriptForShop = window.BC_GDPR_CustomScriptForShop || [];

    window.GDPR_LC_Manager = {
        defaultConfig : {
            testMode : {{ section.settings.testMode | default: false }},
            thirdParty : false,
            setDynamicHeight: true,
            setDynamicWidth: true,
            setDynamicParentHeight: true,
            observerDynamicElement: true,
            dynamicHeightUnit: "{{ section.settings.unit }}",
            dynamicWidthUnit: "{{ section.settings.unit }}",
            bannerWidth : "96%",
            bannerWidthMobile : "calc(100% - {{ section.settings.bannerWidthMobile }}px)",
            bannerMaxWidth :  "{{ section.settings.bannerMaxWidth }}px",
            buttonClass : [ {%- assign buttonClasses = section.settings.buttonClass | split: ',' -%}{%- for buttonClass in buttonClasses -%}"{{ buttonClass }}",{%- endfor -%}],
            breakPoints : ["640px", "769px", "1009px"],
            eventType: [ {%- assign events = section.settings.eventType | split: ',' -%}{%- for event in events -%}"{{ event }}",{%- endfor -%} ]
        },
        customFunctions : [
        {%- for block in section.blocks -%}
            {%- if block.type == "customScripts" -%}
            {%- if block.settings.cookieName != blank and block.settings.cookieName != "" and block.settings.script != blank and block.settings.script != "" -%}
            function {{ block.settings.cookieName }} () {
                try {
                    {{ block.settings.script }}
                } catch ( e ) {
                    console.warn('GDPR Legal Cookie => Please check custom script for cookie: ' + {{ block.settings.cookieName }} );
                }
            },
            {%- endif -%}
            {%- endif -%}
    {%- endfor -%}
    ],
    thirdPartyScriptDefinition : [
        {%- for block in section.blocks -%}
    {%- if block.type == 'thirdPartyScript' -%}
    {%- assign cookies = block.settings.title | split: ',' -%}
    {%- for cookie in cookies -%}
    { "src" : "{{ block.settings.src }}", "cookie" : "{{ cookie | strip }}", "provider" : "{{ block.settings.provider }}", "description" : "{{ block.settings.description | escape }}", "expires" : {{ block.settings.duration }}, "domain" : {% if block.settings.domain == "" %}sDomain{% else %}"{{ block.settings.domain }}"{% endif %}, "declaration" : {{ block.settings.declaration }}, "group" : "{{ block.settings.group }}" },
    {%- endfor -%}
    {% endif %}
    {%- endfor -%}
    { "src" : "analytics.js", "cookie" : "_shopify_fs", "provider" : "shopify.com", "description" : "", "expires" : 0, "domain" : sDomain, "declaration" : 1, "group" : "shopify" },
    { "src" : "doubleclick.net","cookie" : "_shopify_fs","provider" : "shopify.com","description" : "","expires" : 0,"domain" : sDomain,"declaration" : 1,"group" : "shopify" },
    { "src" : "trekkie", "cookie" : "_shopify_fs", "provider" : "shopify.com", "description" : "", "expires" : 0, "domain" : sDomain, "declaration" : 1, "group" : "shopify" },
    { "src" : "luckyorange", "cookie" : "_shopify_fs", "provider" : "shopify.com", "description" : "", "expires" : 0, "domain" : sDomain, "declaration" : 1, "group" : "shopify" }
    ]

    };
    let iframeElements = [];
    let attributes = ['src', 'data-src'];

    {% capture iframe_data %}
    {%- for block in section.blocks -%}
    {%- if block.type == 'thirdPartyScript' and block.settings.use_iframes -%}
    {%- assign cookies = block.settings.title | split: ',' -%}
    "{{ block.settings.src }}" : [
        {%- for cookie in cookies -%}
    "{{ cookie | strip }}",
    {%- endfor -%}
    ],
    {% endif %}
    {%- endfor -%}
    {% endcapture %}

    {%- assign size = iframe_data | size | minus: 1 -%}
    {%- assign iframe_data = iframe_data | slice: 0 , size -%}

    let liquidData = {
        iframe_data : { {{ iframe_data }} }
    };
    window.customCookies = {
    {%- capture cookieNames -%}
    {%- for block in section.blocks -%}
    {%- if block.type == "customScripts" -%}
    {%- if block.settings.cookieName != blank and block.settings.cookieName != "" and block.settings.script != blank and block.settings.script != "" -%}
    "{{ block.settings.cookieName }}" : true,
    {%- endif -%}
    {%- endif -%}
    {%- endfor -%}
    {%- endcapture -%}
    {%- assign cookieNames = cookieNames | split: "," -%}
    {% for cookie in cookieNames %}
    {{ cookie }}{% if forloop.last %}{% else %},{% endif %}
    {% endfor %}
    };

    window.BC_GDPR_CustomScriptForShop = function () {
        return window.GDPR_LC_Manager.customFunctions;
    };

    window.ShopifyAnalytics = window.ShopifyAnalytics || {};

    (function(){
        window.GDPR_LC_Manager.thirdPartyScriptDefinition.forEach(function ( defintion ) {
            window.thirdPartyScriptDefinition.push( defintion );
        });
    })();

    {%- if sections.settings.xml_http_request -%}

    (function () {
        let open = XMLHttpRequest.prototype.open;

        XMLHttpRequest.prototype.open = function( method, url ) {
            open.apply(this, arguments);

            let send = this.send;

            this.send = function() {
                let allow = true;
                window.thirdPartyScriptDefinition.forEach(function ( definition ) {
                    if ( url.includes( definition.src ) ) {
                        allow = false
                    }
                });
                if( allow ) {
                    return send.apply(this, arguments)
                }
                window.blockedRequests = window.blockedRequests || [];
                window.blockedRequests.push( url );
                console.log('blocked request', url );
            };
        };
    })();
    {%- endif -%}
    {%- if sections.settings.document_cookie -%}

    (function () {
        window.blockedCookies = window.blockedCookies || [];
        window.setCookiesData = window.setCookiesData || [];
        window.whitelistCookies = window.whitelistCookies || ['_bc_c_set'];

        let cookieDesc = Object.getOwnPropertyDescriptor(Document.prototype, 'cookie');
        let cookieData = [];
        let holdCookieData = [];
        let reInitSetCookies = false;

        window.reInitCookies = function ( data = reInitSetCookies ) {
            while ( data.length > 0 ) {
                document.cookie = data.shift();
            }
        };
        function checkExpires ( val ) {
            let regex = /(expires=.*1970)/gm;
            let result = false;

            if ( val.match( regex ) !== null ) {
                result = true
            }
            if ( result === false ) {
                result = val.includes('expires=0') || val.includes('undefined');
            }
            return result;
        }
        function checkWhiteList ( val ) {
            let result = false;
            window.whitelistCookies.forEach ( function ( whitelist__value ) {
                if ( val.startsWith ( whitelist__value + '=' ) ) {
                    result = true;
                }
            } );

            if ( !!window.GDPR_LC && !!window.GDPR_LC.Cookies && !!window.GDPR_LC.Cookies.list ) {
                Object.keys( window.GDPR_LC.Cookies.list ).forEach( function ( key ) {
                    if ( val.startsWith( key + '=' ) && window.GDPR_LC.Cookies.list[ key ].userSetting ) {
                        result = true;
                    }
                });
                if ( reInitSetCookies === false ) {
                    reInitSetCookies = true;
                    setTimeout( window.reInitCookies, 1 );
                }
            } else {
                holdCookieData.push( val );
            }
            return result;
        }
        function setAccept ( val ) {
            let result = checkWhiteList( val );
            if ( result ) return true;

            return checkExpires( val );
        }

        function isDeleteCookieDefinition( val ) {
            let dataSet = val.split( ';' );
            let result = false;

            dataSet.forEach( function ( set ) {
                let helper = set.split( '=' );

                if ( helper[0].trim() === 'max-age' ) {
                    debugger;
                    result = (helper[1] + 0) < 0;
                }
                if ( helper[0].trim() === 'expires' ) {
                    result = Date.now() > Date.parse( helper[1].trim() );
                }
            });
            return result;
        }

        if ( cookieDesc && cookieDesc.configurable ) {
            window.gdpr_cookie = function () {
                return cookieDesc.get.call(document);
            };
            Object.defineProperty(document, 'cookie', {

                get: function () {

                    if ( cookieData.length > 0 ) {
                        return cookieData.toString ();
                    }
                    return window.gdpr_cookie();
                },
                set: function ( val ) {

                    let deleteCookieDefinition = isDeleteCookieDefinition( val );
                    function isString ( val ) {
                        return Object.prototype.toString.call( val ) === '[object String]';
                    }
                    if ( isString( val ) === false || val === '' || val.startsWith( ',' ) || val.startsWith( 'path' ) || val.startsWith( 'expires' ) || val.startsWith( 'domain=' ) || val.startsWith( 'SameSite=' ) || val.startsWith( 'max-age=' )) {
                        return;
                    }

                    if ( cookieData.includes( val ) === false && deleteCookieDefinition === false ) cookieData.push( val );

                    if ( setAccept( val ) || deleteCookieDefinition ) {

                        if ( window.setCookiesData.includes( val ) === false && deleteCookieDefinition === false ) {
                            window.setCookiesData.push( val );
                        }
                        cookieDesc.set.call(document, val);
                    } else {
                        window.blockedCookies.push(val)
                    }
                }
            });
            cookieDesc.configurable = false;

            document.addEventListener('DOMContentLoaded', function reInitBlockedCookies () {
                let blockedCookies = window.blockedCookies;

                blockedCookies.forEach( function ( cookie ) {
                    document.cookie = cookie;
                });
            });

            document.addEventListener('load', function () {
                let shopifyCookies = ['_shopify_m','_shopify_s','_shopify_y','_y','s'];
                shopifyCookies.forEach( function( cookieName ) {
                    document.cookie = cookieName + "=;max-age=-9999;domain=." + window.location.host + ";";
                    document.cookie = cookieName + "=;max-age=-9999;domain=" + window.location.host + ";";
                });
            });
        }
    })();
    {%- endif -%}

    (function bc_iframeChecker () {
        let srcSet = liquidData["iframe_data"];
        let srcSetKeys = Object.keys( srcSet );

        function searchIframes () {
            document.querySelectorAll('iframe').forEach(function ( iframe ) {
                overrideIframeData( iframe );
            });
        }
        function overrideIframeData ( iframe ) {

            attributes.forEach( function ( srcType ) {
                let newAttribute = 'gdpr-' + srcType;

                if ( iframe.hasAttribute( srcType ) ) {
                    let src = iframe.getAttribute( srcType );

                    if( checkSrcIsBlocked( iframe ) ) {
                        srcSetKeys.forEach( function ( key ) {

                            if ( src.includes( key ) ) {
                                iframe.setAttribute('data-gdpr-cookie', srcSet[ key ]);
                            }
                        });
                        iframe.removeAttribute( srcType );
                        iframe.setAttribute( newAttribute, src );
                        iframeElements.push( iframe );
                    }
                }
            });
        }

        function checkSrcIsBlocked ( iframe ) {
            let result = false;

            attributes.forEach( function ( srcType ) {
                if ( iframe.hasAttribute( srcType ) ) {
                    result = srcSetKeys.filter( function ( src ) {
                        return iframe.getAttribute ( srcType ).includes ( src )
                    } ).length > 0;
                }
            });

            return result && iframe.hasAttribute( 'data-gdpr-allow' ) ? false : result;
        }
        function callback ( mutationRecordsList ) {
            let target = mutationRecordsList[0].target;

            if ( target.nodeName === 'IFRAME' && target.hasAttribute('gdpr-obs') === false) {
                attributes.forEach( function ( srcType ) {
                    if ( target.hasAttribute( srcType ) ) {
                        target.setAttribute('gdpr-obs', true );
                        if ( checkSrcIsBlocked( target ) ) {
                            overrideIframeData ( target );
                        }
                    }
                })
            }
        }
        function  createObserver () {
            let domObserver = new MutationObserver( callback );
            domObserver.observe( document , {
                attributes: true,
                childList: true,
                characterData: false,
                subtree: true,
                attributeFilter: attributes
            });
        }
        if ( srcSetKeys.length > 0 ) {
            createObserver ();
            document.addEventListener ( 'DOMContentLoaded', searchIframes );
        }

        function blockStaticScripts () {

            function callback ( node ) {
                let target = node;

                if ( target.nodeName === 'SCRIPT' && target.hasAttribute('gdpr-obs') === false) {
                    attributes.forEach( function ( srcType ) {
                        if ( target.hasAttribute( srcType ) ) {
                            target.setAttribute('gdpr-obs', true );
                            if ( checkSrcIsBlocked( target ) ) {
                                let n = document.createElement('script');
                                n.src = target.src;
                                n.setAttribute('gdpr-obs', true );
                                document.head.appendChild(n);
                                overrideIframeData ( target );
                            }
                        }
                    })
                }
            }

            console.log('start blockStaticScripts')
            const OBSERVER_CONFIG = {
                childList: true,
                subtree: true
            }

            new MutationObserver( ( mutations ) => {
                mutations.forEach( ( { addedNodes } ) => {
                    addedNodes.forEach( ( node ) => {
                        callback( node )
                    } )
                } )
            }).observe( document.documentElement, OBSERVER_CONFIG );
        }
        blockStaticScripts();


    })();

    {%- if section.settings.useOverlay -%}
    (function () {

        let config = window.GDPR_LC_Manager.defaultConfig;
        window.bc_DataLayer = window.bc_DataLayer || [];

        function _instanceof(left, right) {
            if (right != null && typeof Symbol !== "undefined" && right[Symbol.hasInstance]) {
                return !!right[Symbol.hasInstance](left);
            } else {
                return left instanceof right;
            }
        }

        function log ( logDataSet ) {

            if ( config.testMode && !!logDataSet ) {
                if ( Array.isArray(logDataSet ) ) {
                    console.table( logDataSet );
                } else if ( typeof logDataSet === 'string' || logDataSet === _instanceof( logDataSet, String ) ){
                    console.log( '%c' + logDataSet, 'background: #222; color: #bada55' );
                } else if ( typeof logDataSet === "object" ) {
                    try {
                        JSON.stringify( logDataSet );
                        console.debug(logDataSet);
                    } catch ( e ) {
                        console.log( '%c logDataSet is not from type Object', 'background: #222; color: #bada55' );
                    }
                }
            }
        }

        function createCustomArrayForBC_ConsentManager () {
            try {
                Object.defineProperty(bc_DataLayer, "push", {
                    enumerable: false,
                    configurable: false,
                    writable: false,
                    value: function value() {
                        for (let i = 0, n = this.length, l = arguments.length; i < l; i++, n++) {
                            createConsentManager(arguments[i]);
                        }
                        return true;
                    }
                });
            } catch ( e ) {

            }
        }

        function createDefaultConfig (config) {
            Object.keys(config).forEach(function (key) {
                window.bc_consetnManager_defaultConfig[key] = config[key];
            });
        }

        function createConsentManager(configData) {

            function iterateNodes (config, interval) {

                if (config.nodes.length > 0) {
                    Array.prototype.forEach.call(config.nodes, function (parent) {
                        if ( configData.requiredChildren !== null ) {
                            let childElements = configData.requiredChildren.split(',');

                            childElements.forEach( function ( child ) {
                                if ( parent.querySelector( child ) !== null ) {
                                    config.currentScript = parent;
                                    window[ "bc_" + config.dataConsentManager ] = new consentManager(config);
                                }
                            });
                        } else {
                            config.currentScript = parent;
                            window[ "bc_" + config.dataConsentManager ] = new consentManager(config);
                        }
                    });
                    clearInterval(interval);
                }
            }

            log(['createConsetnManager => configData', configData ]);

            let interval = setInterval(function () {
                if (typeof GDPR_LC !== "undefined") {
                    if ( !!configData.nodes ) {
                        if ( typeof configData.nodes == "string") {
                            configData.nodes = document.querySelectorAll( configData.nodes );
                            if ( typeof configData.nodes != 'string' ) {

                                log(['DOMContentLoaded', configData.nodes]);
                                iterateNodes(configData, interval);
                            }

                        } else {
                            iterateNodes(configData, interval);
                        }
                    } else {
                        window[ "bc_" + configData.dataConsentManager ] = new consentManager(configData);
                        clearInterval(interval);
                    }
                }
            }, 10);
        }

        function consentManager(consentConfig) {
            if (consentConfig === void 0) consentConfig = null;

            this.config = {};
            this.init(consentConfig);
        }
        consentManager.prototype.getClosest = function ( e ) {
            return e.target.closest( 'div.bc_consent_container' );
        };
        consentManager.prototype.getCookieName = function ( container ) {
            return this.getButton(container).dataset.cookie;
        };
        consentManager.prototype.getButton = function ( container ) {
            return container.querySelector("button");
        };
        consentManager.prototype.getVisibility = function ( visibility )  {
            return visibility ? this.config.containerVisibility : this.config.containerHidden;
        };
        consentManager.prototype.getType = function ( cookie ) {
            return GDPR_LC.Cookies.list[cookie].type;
        };
        consentManager.prototype.getCookiesFromGroup = function (group) {
            let match = this.itterateThirdPartyScriptDefinition("group", group);
            if (match.length > 0) return match;
            else return null;
        };
        consentManager.prototype.getGroup = function (cookieName) {
            let cookieData = this.itterateThirdPartyScriptDefinition( "cookie", cookieName );
            if (cookieData.length > 0) return cookieData[0].group;
            else return null;
        };
        consentManager.prototype.updateCookie = function (cookie) {

            if ( typeof GDPR_LC.Cookies.list[cookie] !== "undefined" ) {
                GDPR_LC.Cookies.list[cookie].update("userSetting", true, true);
                GDPR_LC.Cookies.list[cookie].recover();
            }
        };
        consentManager.prototype.itterateThirdPartyScriptDefinition = function (key, value) {
            if (thirdPartyScriptDefinition !== undefined) {
                return thirdPartyScriptDefinition.filter(function (definition) {
                    if (definition[key] === value) {
                        return definition;
                    }
                });
            } else return [];
        };
        consentManager.prototype.setConfig = function (config) {
            if (config !== null && _instanceof(config, Object)) {
                $this = this;
                Object.keys(config).forEach(function (key) {
                    $this.config[key] = config[key];
                });
            }
        };
        consentManager.prototype.setNewUserConsent = function (cookieName) {
            let $this = this,
                group = this.getGroup(cookieName),
                cookies;

            let cookiesFromGroup = this.getCookiesFromGroup( group );

            function generateDataObject ( cookie ) {
                let result = {
                    name : cookie.cookie,
                    domain : cookie.domain !== undefined ? cookie.domain : false
                };
                return result;
            }

            if ( cookiesFromGroup !== null ) {
                cookies = cookiesFromGroup.map( cookie => generateDataObject( cookie ) );
            } else {
                cookies = [ { name : cookieName } ];
            }

            cookies.forEach(function (cookie) {
                if ( typeof GDPR_LC.Cookies.list[ cookie.name ] !== "undefined" ) {
                    $this.updateCookie( cookie.name );
                } else if ( typeof GDPR_LC.Cookies.list[ cookie.name + $this.config.prefix + cookie.domain ] !== "undefined" ) {
                    $this.updateCookie( cookie.name + $this.config.prefix + cookie.domain );
                }

            });

            this.set_bc_c_set_cookie();
            localStorage.setItem( "GDPR_legal_cookie", JSON.stringify(GDPR_LC.Cookies.list) );
            GDPR_HELPER.saveAndUpdateData();
        };
        consentManager.prototype.set_bc_c_set_cookie = function () {
            let date = Date.now();
            let userConsentData = {
                date: date,
                version: GDPR_LC_versionNr
            };

            for (let cookie in GDPR_LC.Cookies.list) {
                userConsentData[this.getType(cookie)] = userConsentData[this.getType(cookie)] || {};
                userConsentData[this.getType(cookie)][!0] = userConsentData[this.getType(cookie)][!0] || 0;
                userConsentData[this.getType(cookie)][!1] = userConsentData[this.getType(cookie)][!1] || 0;

                if (GDPR_LC.Cookies.list[cookie].userSetting) {
                    userConsentData[this.getType(cookie)][!0] = 1;
                } else {
                    userConsentData[this.getType(cookie)][!1] = 1;
                }
            }

            let userConsentBase64 = btoa(JSON.stringify(userConsentData));

            GDPR_LC.Cookies.list._bc_c_set.update("value", userConsentBase64, true);

            document.cookie = "_bc_c_set=" + userConsentBase64 + ";path=/;max-age=2592000;SameSite=Lax;";
        };
        consentManager.prototype.setDisplay = function (container, visibility) {
            let $this = this;
            let containers = document.querySelectorAll('[data-consentmanager="' + container.dataset.consentmanager + '"]');
            containers.forEach(function (container) {
                container.style.display = $this.getVisibility(visibility);
                if ( visibility === false ) {
                    container.parentElement.style.maxHeight = "unset";
                }
            });
        };
        consentManager.prototype.setButtonClasses = function (container) {
            this.config.buttonClass.forEach(function (buttonClass) {
                container.querySelector("button").classList.add(buttonClass.trim());
            });
        };
        consentManager.prototype.setDynamicHeight = function (container) {
            let parentElement = container.parentElement;
            if(!parentElement) return;
            let childElement = container.querySelector('.bc_consent_container__wrapper');

            let parentHeight = parentElement.offsetHeight;
            let containerHeight = container.offsetHeight;
            let childHeight;

            if (childElement !== null) {
                childHeight = childElement.offsetHeight;
            }


            if (this.config.setDynamicParentHeight) {

                if (parentHeight > containerHeight) {
                    container.style.height = parentHeight + this.config.dynamicWidthUnit;
                } else if (childElement !== null && childHeight > parentHeight) {
                    container.style.minHeight = 200 + this.config.dynamicWidthUnit;
                    container.style.maxHeight = 350 + this.config.dynamicWidthUnit;
                    parentElement.style.height = 'auto';
                    parentElement.style.minHeight = (200 + 20) + this.config.dynamicWidthUnit;
                    parentElement.style.maxHeight = (350 + 20) + this.config.dynamicWidthUnit;
                } else {
                    parentElement.style.height = 'auto';
                }
            } else {
                container.style.height = parentHeight + this.config.dynamicWidthUnit;
            }
            container.style.height = '100%';

        };
        consentManager.prototype.setDynamicWidth = function (container) {
            if (this.config.setDynamicWidth && !!container.parentElement ) {
                container.style.width = container.parentElement.offsetWidth + this.config.dynamicWidthUnit;
            }
        };
        consentManager.prototype.setBannerWidth = function (container) {

            if ( !!$this.config.breakPoints ) {
                try {
                    let points = $this.config.breakPoints.filter( breakPoint => document.body.offsetWidth < +breakPoint );
                    let point = Math.min(...points);
                    let index = $this.config.breakPoints.findIndex( p => +p == +point );
                    container.querySelector('.bc_consent_container__wrapper').style.maxWidth = $this.config.breakPointsWidth[ index ];
                    container.querySelector('.bc_consent_container__wrapper').style.maxWidth = $this.config.breakPointsWidth[ index ];
                } catch (error) {
                    if ($this.config.bannerWidth !== null) {
                        container.querySelector('.bc_consent_container__wrapper').style.width = $this.config.bannerWidth;
                        //container.querySelector('.bc_consent_container__wrapper').style.minWidth = $this.config.bannerWidth;
                        container.querySelector('.bc_consent_container__wrapper').style.maxWidth = $this.config.bannerMaxWidth;
                    }
                }
            } else {
                if ($this.config.bannerWidth !== null) {
                    container.querySelector('.bc_consent_container__wrapper').style.width = $this.config.bannerWidth;
                    container.querySelector('.bc_consent_container__wrapper').style.maxWidth = $this.config.bannerMaxWidth;
                }
            }

        };
        consentManager.prototype.setStyle = function (container) {
            this.setButtonClasses(container);
            this.setDynamicHeight(container);
            this.setDynamicWidth(container);
            this.setBannerWidth(container);
        };
        consentManager.prototype.addEvent = function (button) {
            $this = this;

            this.config.eventType.forEach(function (type) {

                button.addEventListener(type, function (e) {
                    $this = window['bc_' + e.target.closest('[data-consentmanager]').dataset.consentmanager];
                    $this.setNewUserConsent(e.target.dataset.cookie);
                    new Promise( function( resolve, reject ) {
                        resolve( $this.checkScript(e.target.dataset.cookie) );
                    }).then(function(){
                        $this.reInitIframes( e.target.dataset.cookie );
                        $this.setDisplay($this.getClosest(e), false);
                    });
                });
            });
        };
        consentManager.prototype.reInitIframes = function ( cookie ) {

            iframeElements.forEach(function ( iframe ) {
                if ( iframe.getAttribute('data-gdpr-cookie') === cookie ) {
                    attributes.forEach(function ( key ) {
                        if ( iframe.hasAttribute( 'gdpr-' + key ) ) {
                            iframe.src = iframe.getAttribute( 'gdpr-' + key );
                            iframe.removeAttribute( 'gdpr-' + key );
                            iframe.removeAttribute( 'data-gdpr-cookie' );
                            iframe.setAttribute( 'data-gdpr-allow', true );
                        }
                    });
                }
            });
        };
        consentManager.prototype.checkConsent = function (container) {
            let cookieName = this.getCookieName(container),
                consent = true, $this = this;

            if (GDPR_LC.Cookies.list[cookieName] !== undefined) {
                if ( GDPR_LC.Cookies.list[cookieName].userSetting === false || ( !!this.config.testMode && !!Shopify.designMode ) ) {
                    consent = false;
                }
            } else if ( this.config.thirdParty && typeof thirdPartyScriptDefinition !== "undefined") {
                thirdPartyScriptDefinition.forEach(function ( definition ) {
                    let name = cookieName + '$%bc%$' + definition.domain;
                    if (GDPR_LC.Cookies.list[ name ] !== undefined) {
                        $this.config.cookie = name;
                        $this.config.prefix = '$%bc%$';
                        if ( GDPR_LC.Cookies.list[ name ].userSetting === false || ( !!$this.config.testMode && !!Shopify.designMode ) ) {
                            consent = false;
                        }
                    }
                });
            }
            return consent;
        };
        consentManager.prototype.iterateScriptElementsHidden = function (definition) {
            scriptElementsHidden.forEach(function (script) {
                if (script.src.match(definition.src) !== null) {
                    script.removeAttribute('type');
                    document.head.appendChild(script);
                }
            });
        };
        consentManager.prototype.checkScript = function ( cookieName ){
            $this = this;
            if ( typeof GDPR_LC.Cookies.list[ cookieName ] !== "undefined" && GDPR_LC.Cookies.list[ cookieName ].userSetting ) {
                thirdPartyScriptDefinition.forEach(function ( definition ){
                    if ( definition.cookie === cookieName ) {
                        $this.iterateScriptElementsHidden( definition );
                    }
                });
            } else if ( this.config.thirdParty ){
                thirdPartyScriptDefinition.forEach(function ( definition ){
                    if ( definition.cookie === cookieName && typeof GDPR_LC.Cookies.list[ cookieName + '$%bc%$' + definition.domain ] !== "undefined" && GDPR_LC.Cookies.list[ cookieName + '$%bc%$' + definition.domain ].userSetting ) {
                        $this.iterateScriptElementsHidden( definition );
                    }
                });
            }
            return true;
        };
        consentManager.prototype.replacePlaceholder = function (container) {
            Array.prototype.forEach.call(container.querySelector('.bc_consent_container__message').children, function (child) {
                if (child.innerText.match('##placeholder##') !== null) {
                    child.innerText = child.innerText.replace('##placeholder##', container.dataset.consentmanager.toUpperCase());
                }
            });
        };
        consentManager.prototype.initContainer = function (container) {
            if (!this.checkConsent(container)) {
                this.replacePlaceholder(container);
                this.addEvent(this.getButton(container));

                this.setDisplay(container, true);
            } else {
                this.reInitIframes( this.getCookieName( container ) );
                this.setDisplay(container, false);
            }
        };
        consentManager.prototype.addEventsSetStyle = function (target, eventType, container) {
            $this = this;
            target.addEventListener(eventType, function () {
                setTimeout(function () {
                    $this.setStyle(container);
                }, 50);
            });
        };
        consentManager.prototype.addResizeEvent = function (container) {
            this.addEventsSetStyle(window, "resize", container);
        };
        consentManager.prototype.DomLoaded = function (container) {
            this.addEventsSetStyle(document, "DOMContentLoaded", container);
        };
        consentManager.prototype.observerDynamicElement = function (container) {
            if (this.config.observerDynamicElement) {
                $this = this;

                let target = this.config.currentScript.parentElement;
                let ro = new ResizeObserver(() => {
                    setTimeout( function(){
                        $this.setStyle(container);
                    }, 50);
                });
                ro.observe(target);
            }
        };
        consentManager.prototype.setDataCookieName = function (container) {
            container.querySelector('button').dataset.cookie = this.config.cookie;
        };
        consentManager.prototype.getChildElements = function () {
            return document.querySelector('#bc_consent_container_template').innerHTML;
        };
        consentManager.prototype.getConsentContainer = function (containerName) {
            let consentContainer = document.createElement('div');
            consentContainer.classList.add('bc_consent_container');
            consentContainer.setAttribute('data-consentmanager', containerName);
            return consentContainer;
        };
        consentManager.prototype.createContainer = function () {
            let consentContainer = this.getConsentContainer(this.config.dataConsentManager);
            consentContainer.innerHTML = this.getChildElements();
            return consentContainer;
        };
        consentManager.prototype.appendContainer = function () {
            try {
                let parent = this.config.currentScript;
                if (parent.hasAttribute('data-consentmanager_isset') === false) {
                    parent.prepend(this.createContainer());
                    parent.setAttribute('data-consentmanager_isset', 1);
                    parent.style.position = "relative";
                }
                return true;
            } catch (error) {
                return false;
            }
        };
        consentManager.prototype.addCookieBannerEvent = function (container) {
            let $this = this;
            let interval = setInterval(function () {
                let bannerButtons = document.querySelectorAll('#banner-wrapper .banner-main_buttons p');
                if (bannerButtons !== null) {
                    document.querySelectorAll('#banner-wrapper .banner-main_buttons p').forEach(function (bannerButton) {
                        bannerButton.addEventListener('click', function () {
                            setTimeout(function () {
                                $this.initContainer(container);
                            }, 100);
                        });
                    });
                    container.setAttribute('data-consentmanagerinit', true);
                    clearInterval(interval);
                }
            }, 50);
        };
        consentManager.prototype.initContainers = function () {
            if (typeof GDPR_LC !== "undefined") {
                let $this = this;
                let consentContainers = document.querySelectorAll('[data-consentmanager="' + $this.config.dataConsentManager + '"]');

                consentContainers.forEach(function (container) {
                    if (!container.hasAttribute('data-consentmanagerinit')) {
                        $this.observerDynamicElement(container);
                        $this.addResizeEvent(container);
                        $this.DomLoaded(container);
                        $this.setDataCookieName(container);
                        $this.initContainer(container);
                        $this.setStyle(container);
                        $this.addCookieBannerEvent(container);
                        container.setAttribute('data-consentmanagerinit', true );
                        log( 'consentManager created: ' );
                        log( $this );
                    }
                });
            }
        };
        consentManager.prototype.init = function (config) {
            this.setConfig(window.bc_consetnManager_defaultConfig);
            this.setConfig(config);
            let $this = this;

            new Promise(function (resolve) {
                resolve( $this.appendContainer() );
            }).then(function ( result ) {
                if (result) {
                    $this.initContainers();
                }
            });
        };

        createCustomArrayForBC_ConsentManager();

        function initialize () {

            window.bc_consetnManager_defaultConfig = {
                dataConsentManager: null,
                containerVisibility: "unset",
                containerHidden: "none"
            };
            Array.prototype.bc_setDefaults = function (config) {
                createDefaultConfig(config);
            };
            window.bc_DataLayer.bc_setDefaults(config);
        }
        initialize();

        if ( typeof Shopify !== "undefined" && !!Shopify.designMode ) {
            window.bc_init_bc_overlay_manager = function(){
                initialize();
            };
        }

    }) ();


    function pushOverlaysData() {
        function _push( config ) {
            (function ( G,D,P,R,_,L,C, B ) {(D[R]=D[R]||[]),(G[_]=!!G[B]?G[B]:!![P[L][C]]&&[P[L][C]]),(D[R].push(G));})(config,window,document,'bc_DataLayer','nodes','currentScript','parentNode','parentSelector');
        };
        {%- for block in section.blocks -%}
        {%- if block.type == 'overlay' -%}
        setTimeout( function(){
            let config = {
                parentSelector : {%- if block.settings.parentSelector != blank and block.settings.parentSelector != "" -%}'{{ block.settings.parentSelector }}'{%- else -%}null{%- endif -%},
            requiredChildren : {%- if block.settings.required_childs != blank and block.settings.required_childs != '' -%}"{{ block.settings.required_childs }}"{%- else -%}null{%- endif -%},
            blockElements : {%- if block.settings.block_elements != blank and block.settings.block_elements != '' -%}"{{ block.settings.block_elements }}"{%- else -%}null{%- endif -%},
            dataConsentManager : '{{ block.settings.title }}',
                cookie : '{{ block.settings.cookie }}',
                addResizeEvent: {{ block.settings.addResizeEvent }},
            thirdParty : {{ block.settings.thirdParty }}
        };
            _push(config);
        },1 );
        {%- endif -%}
        {%- endfor -%}
    }
    window.addEventListener('DOMContentLoaded', pushOverlaysData );

    window.addEventListener('shopify:section:load', function ( event ) {
        console.log( event );
        window.bc_init_bc_overlay_manager();
        pushOverlaysData();
    });


    {%- endif -%}
  </script>
  <style>
    .bc_consent_container {
        display: none;
        position: absolute;
    {%- assign opacity = section.settings.overlay_opacity | divided_by: 100.0 -%}
    background-color:{{ section.settings.overlay_color | color_modify: 'alpha', opacity }};
    backdrop-filter: blur({{section.settings.overlay_blur}}px);
    opacity: 1;
    z-index: {{ section.settings.z_index }};
    left: 0;
    top: 0;
    }

    .bc_consent_container .bc_consent_container__wrapper {
        position: absolute;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
    background-color: {{ section.settings.box_color }};
    padding: 1rem 1rem;
    width: auto;
    border-radius: {{ section.settings.wrapper_border_radius }}px;
    border: solid 1px black;
    text-align: center;
    {%- if section.settings.activate_shadow -%}
    {%- assign opacity = section.settings.shadow_opacity | divided_by: 100.0 -%}
    box-shadow: {{ section.settings.shadow_x }}px {{ section.settings.shadow_y }}px {{ section.settings.shadow_blur_radius }}px {{ section.settings.shadow_spread_radius }}px {{ section.settings.shadow_color | color_modify: 'alpha', opacity }};
    {%- endif -%}
    }

    .bc_consent_container .bc_consent_container__wrapper .bc_consent_container__message {
        text-align: center;
        padding: 0 0 1rem 0;
    font-size: {{ section.settings.fontSize }}px;
    }
    .bc_consent_container .button__wrapper {
        width: 100%;
        height: 3rem;
        vertical-align: middle;
        justify-content: center;
    }
    .bc_consent_container .bc_consent_container__wrapper button {
        margin: unset;
        position: absolute;
        left: 50%;
        transform: translateX(-50%);
    }
    .bc_consent_container .bc_consent_container__message p {
    color: {{ section.settings.text_color }};
    font-size: {{ section.settings.fontSize }}px;
    }
  </style>
{% endif %}
  {% endunless %}
{% schema %}
{
  "name":"GDPR_LC Manager",
  "settings":
  [
    {
      "type":"header",
      "content":"Manual",
      "info": "[Manual](https://beeclever.freshdesk.com/support/solutions/77000207123)"
    },
    {
      "type":"header",
      "content":"Default settings"
    },
    {
      "type":"checkbox",
      "id":"testMode",
      "label":"Test mode",
      "default":true,
      "info":"Please activate for styling, overlay is created so in the Customizer, even if there is already a consent for the cookies. Is only taken over with the save."
    },
    {
      "type":"checkbox",
      "id":"useOverlay",
      "label":"use Overlay",
      "default":false,
      "info":"Activation & deactivation of the overlays"
    },
    {
      "type":"select",
      "id":"unit",
      "label":"Unit",
      "options":
      [
        {
          "value":"px",
          "label":"px",
          "group":"unit"
        },
        {
          "value":"%",
          "label":"%",
          "group":"unit"
        }
      ]
    },
    {
      "type":"range",
      "id":"bannerMaxWidth",
      "label":"Banner max widht",
      "unit":"px",
      "min":0,
      "max":1200,
      "step":40,
      "default":480
    },
    {
      "type":"range",
      "id":"bannerWidthMobile",
      "label":"Banner padding for mobile",
      "unit":"px",
      "min":1,
      "max":100,
      "step":1,
      "default":8
    },
    {
      "type":"range",
      "id":"fontSize",
      "label":"Font size",
      "unit":"px",
      "min":1,
      "max":30,
      "step":1,
      "default":12,
      "info":"Set font size"
    },
    {
      "type":"range",
      "id":"z_index",
      "label":"Set z-index",
      "unit":" i",
      "min":0,
      "max":100,
      "step":1,
      "default":20,
      "info":"Set z-index"
    },
    {
      "type":"textarea",
      "id":"buttonClass",
      "label":"Button classes",
      "default":"Button, Button--primary",
      "info":"Add CSS classes for button, comma separated"
    },
    {
      "type":"textarea",
      "id":"eventType",
      "label":"Event types",
      "default":"click",
      "info":"Add button event type"
    },
    {
      "type":"header","content":"Styling"
    },
    {
      "type":"color",
      "id":"overlay_color",
      "label":"Overlay color",
      "default":"#000000"
    },
    {
      "type":"range",
      "id":"overlay_opacity",
      "min":0,
      "max":100,
      "step":1,
      "unit":"%",
      "label":"overlay opacity",
      "default":50},{"type":"range",
      "id":"overlay_blur",
      "min":0,
      "max":15,
      "step":1,
      "unit":"%",
      "label":"overlay blur",
      "default":4
    },
    {
      "type":"color",
      "id":"box_color",
      "label":"Box color",
      "default":"#fff"
    },
    {
      "type":"color",
      "id":"text_color",
      "label":"Text color",
      "default":"#000"
    },
    {
      "type":"checkbox",
      "id":"activate_shadow",
      "label":"Activate box shadow",
      "default":false
    },
    {
      "type":"color",
      "id":"shadow_color",
      "label":"Box shadow color",
      "default":"#000000"
    },
    {
      "type":"range",
      "id":"shadow_opacity",
      "min":0,
      "max":100,
      "step":1,
      "unit":"%",
      "label":"shadow opacity",
      "default":50
    },
    {
      "type":"range",
      "id":"shadow_x",
      "min":0,
      "max":100,
      "step":1,
      "unit":"px",
      "label":"offset-x",
      "default":8},
    {
      "type":"range",
      "id":"shadow_y",
      "min":0,
      "max":100,
      "step":1,
      "unit":"px",
      "label":"offset-y",
      "default":8
    },
    {
      "type":"range",
      "id":"shadow_blur_radius",
      "min":0,
      "max":100,
      "step":1,
      "unit":"px",
      "label":"blur radius",
      "default":8},
    {
      "type":"range",
      "id":"shadow_spread_radius",
      "min":0,
      "max":100,
      "step":1,
      "unit":"px",
      "label":"spread radius",
      "default":8
    },
    {
      "type":"range",
      "id":"wrapper_border_radius",
      "min":0,
      "max":100,
      "step":1,
      "unit":"px",
      "label":"Box border radius",
      "default":8
    }
  ],
  "presets":
  [
    {
      "name":"Overlay Manager",
      "category":"GDPR Legal Cookie"
    }
  ],
  "blocks":
  [
    {
      "type":"overlay",
      "name":"Overlay",
      "settings":
      [
        {
          "type":"header",
          "content":"Overlay definition",
          "info":"Important. To use the overlay, you must create an associated thirdparty script definition that is designed to use the same cookie."
        },
        {
          "type":"text",
          "id":"title",
          "label":"Consent Name",
          "info":"Define a unique name for the overlay. This name must be unique."
        },
        {
          "type":"text",
          "id":"cookie",
          "label":"Cookie name",
          "info":"Specify a cookie to which the consent should be changed. If multiple cookies are set by the call, they are automatically changed as well."
        },
        {
          "type":"checkbox",
          "id":"thirdParty",
          "label":"Third party cookie",
          "default":true,
          "info":"If the cookie is not set by a script, disable this option."
        },
        {
          "type":"checkbox",
          "id":"addResizeEvent",
          "label":"Auto resize",
          "default":true,
          "info":"Should the size and position of the overlay be automatically adjusted to changes in size. Default true."
        },
        {
          "type":"textarea",
          "id":"parentSelector",
          "label":"Add CSS Selectors",
          "info":"Specify where to create an overlay. Specify as a valid CSS selector. If more than one area is to be overlaid, you can specify additional comma-separated selectors."
        },
        {
          "type":"textarea",
          "id":"required_childs",
          "label":"Define required children",
          "info":"If the section or area provides different content, it may be necessary to define a Kinds element. Only if the Kinds element is also present, an overlay is created."
        }
      ]
    },
    {
      "type":"thirdPartyScript",
      "name":"thirdParty Script",
      "settings":
      [
        {
          "type":"header",
          "content":"third party Script definition"
        },
        {
          "type":"text",
          "id":"title",
          "label":"Cookie Name",
          "info":"Set cookie name. If a script sets multiple cookies, they can be specified comma-separated. All information about the corresponding cookie is usually provided by the provider itself."
        },
        {
          "type":"text",
          "id":"group",
          "label":"Group",
          "info":"Define a group. All cookies that are in the same group are selected together and not treated individually. Is necessary if the consent control is defined via a script."
        },
        {
          "type":"checkbox",
          "id":"use_iframes",
          "label":"Does the script integrate an IFrame, such as YouTube, Vimeo, etc.?",
          "default":false
        },
        {
          "type":"text",
          "id":"provider",
          "label":"Provider",
          "info":"Set cookie provider name"
        },
        {
          "type":"text",
          "id":"domain",
          "label":"Domain",
          "info":"specify on which domain the cookies are set. If the cookie is set to the store domain, you can leave this field empty."
        },
        {
          "type":"textarea",
          "id":"description",
          "label":"Cookie Description",
          "info":"Specify a description for the cookie."
        },
        {
          "type":"text",
          "id":"src",
          "label":"Script SRC",
          "info":"Specify the script which should be controlled Consent.If several scripts are set via one source and all of them should be blocked, you can also insert only a part of the script. e.g. If you want all scripts to be controlled by YouTube Consent, it is sufficient to specify youtube.com or only youtube."
        },
        {
          "type":"select",
          "id":"declaration",
          "label":"Cookie type",
          "options":
          [
            {
              "value":"0",
              "label":"Essential",
              "group":"cookie_type"
            },
            {
              "value":"1",
              "label":"Statistic",
              "group":"cookie_type"
            },
            {
              "value":"2",
              "label":"Marketing",
              "group":"cookie_type"
            }
          ]
        },
        {
          "type":"select",
          "id":"duration",
          "label":"Duration",
          "options":
          [
            {
              "value":"0",
              "label":"Session",
              "group":"duration"
            },
            {
              "value":"60",
              "label":"1 minute",
              "group":"duration"
            },
            {
              "value":"1800",
              "label":"30 minutes",
              "group":"duration"
            },
            {
              "value":"3600",
              "label":"1 houre",
              "group":"duration"
            },
            {
              "value":"86400",
              "label":"1 day",
              "group":"duration"
            },
            {
              "value":"604800",
              "label":"7 days",
              "group":"duration"},
            {
              "value":"1209600",
              "label":"14 days",
              "group":"duration"
            },
            {
              "value":"2592000",
              "label":"30 days",
              "group":"duration"
            },
            {
              "value":"5184000",
              "label":"2 months",
              "group":"duration"
            },
            {
              "value":"7776000",
              "label":"3 months",
              "group":"duration"
            },
            {
              "value":"31536000",
              "label":"1 year",
              "group":"duration"
            },
            {
              "value":"63072000",
              "label":"2 years",
              "group":"duration"
            }
          ]
        }
      ]
    },
    {
      "type":"customScripts",
      "name":"custom Script",
      "settings":
      [
        {
          "type":"text",
          "id":"cookieName",
          "label":"Cookie Name",
          "info":"Specify which cookie must be agreed to in order to run the custom script."
        },
        {
          "type":"textarea",
          "id":"script",
          "label":"Script",
          "info":"If multiple custom scripts are to be controlled via this cookie, please enter all of them in this field."
        }
      ]
    }
  ]
}
{% endschema %}